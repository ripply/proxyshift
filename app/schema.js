var string = 'string';
var increments = 'increments';
var integer = 'integer';
var cascade = 'cascade';
var setnull = 'set null';
var restrict = 'restrict';
var boolean = 'boolean';
// Fixtures library does not like timestamps in postgres for some reason
// https://github.com/city41/node-sql-fixtures/blob/master/lib/prioritize.js#L177
// so we are going to use UTC in a bitint as integer will only get us to 2038
var date = 'bigint';

// http://blog.ragingflame.co.za/2014/7/21/using-nodejs-with-mysql

var Schema = {
    // Key values are Model names
    // table names are generated by
    // lower-casing
    // and pluralizing
    // Holds settings for users
    UserSetting: {
        id: {
            type: increments
        },
        pushnotifications: {
            type: boolean,
            defaultTo: true
        },
        textnotifications: {
            type: boolean,
            defaultTo: false
        },
        emailnotifications: {
            type: boolean,
            defaultTo: false
        }
    },
    User: {
        id: {
            type: increments,
            nullable: false
        },
        usersetting_id: {
            type: integer,
            references: 'id',
            inTable: 'usersettings',
            onDelete: cascade,
            onUpdate: cascade,
            unique: true,
            nullable: false
        },
        username: {
            type: string,
            unique: true,
            nullable: false,
            // FIXME: Enabling this overwrites our password encryption on save event
            // lowercase: true,
            maxlen: 20
        },
        firstname: {
            type: string,
            nullable: false
        },
        lastname: {
            type: string,
            nullable: false
        },
        email: {
            type: string,
            unique: true,
            // lowercase: true,
            nullable: false
        },
        verified_email: {
            type: boolean,
            default: false
        },
        password: {
            type: string,
            unique: false,
            maxlen: 100,
            nullable: false,
            encrypt: true
        },
        squestion: {
            type: string,
            nullable: false
        },
        sanswer: {
            type: string,
            nullable: false
        },
        phonehome: {
            type: string
        },
        phonemobile: {
            type: string,
            unique: false
        },
        pagernumber: {
            type: string
        }
    },
    // GMail OAuth tokens
    // refresh_token can only be obtained once upon OAuth
    // access_token will be updated occasionally and must be stored
    EmailAccessToken: {
        id: {
            type: increments
        },
        account: {
            type: string,
            nullable: false
        },
        refresh_token: {
            type: string,
            nullable: false
        },
        access_token: {
            type: string,
            nullable: false
        }
    },
    // Tokens for users to verify their emails
    EmailVerifyToken: {
        id: {
            type: increments
        },
        user_id: {
            type: integer,
            references: 'id',
            inTable: 'users',
            onDelete: cascade,
            onUpdate: cascade,
            unique: false,
            nullable: false
        },
        token: {
            type: string,
            nullable: false
        },
        expires: {
            type: date,
            nullable: false
        }
    },
    // Holds settings for groups
    GroupSetting: {
        id: {
            type: increments
        },
        allowalltocreateshifts: {
            type: boolean,
            defaultTo: false
        },
        requireshiftconfirmation: {
            type: boolean,
            defaultTo: true
        }
    },
    Group: {
        id: {
            type: increments
        },
        user_id: {
            type: integer,
            references: 'id',
            inTable: 'users',
            onDelete: restrict,
            onUpdate: cascade,
            nullable: false
        },
        name: {
            type: string,
            nullable: false
        },
        state: {
            type: string
        },
        city: {
            type: string
        },
        address: {
            type: string
        },
        zipcode: {
            type: integer // TODO: this should be a string? zipcodes can have - in them
        },
        weburl: {
            type: string
        },
        contactemail: {
            type: string,
            nullable: false
        },
        contactphone: {
            type: integer
        },
        groupsetting_id: {
            type: integer,
            references: 'id',
            inTable: 'groupsettings',
            onDelete: cascade,
            onUpdate: cascade,
            unique: true,
            nullable: false
        }
    },
    // groups can have different permissions
    // eg: unprivileged, privileged etc
    // here they can customize the name of their permission levels
    GroupPermission: {
        id: {
            type: increments
        },
        groupsetting_id: {
            type: integer,
            references: 'id',
            inTable: 'groupsettings',
            onDelete: cascade,
            onUpdate: cascade,
            nullable: false
        },
        description: {
            type: string,
            nullable: false
        },
        permissionlevel: {
            // TODO: What is this table for? it doesnt link to a user or location
            type: integer,
            nullable: false
        },
        group_id: {
            type: integer,
            references: 'id',
            inTable: 'groups',
            onDelete: cascade,
            onUpdate: cascade,
            nulable: false
        }
    },
    // timezones for linking
    Timezone: {
        id: {
            type: increments
        },
        name: {
            type: string,
            unique: true
        }
    },
    // physical store where things happen
    Location: {
        id: {
            type: increments
        },
        group_id: {
            type: integer,
            references: 'id',
            inTable: 'groups',
            onDelete: restrict, // prevent accidental deletion of a location
            onUpdate: cascade,
            nullable: false
        },
        timezone_id: {
            type: integer,
            references: 'id',
            inTable: 'timezones',
            onDelete: restrict,
            onUpdate: cascade,
            nullable: false
        },
        state: {
            type: string,
            nullable: false
        },
        city: {
            type: string,
            nullable: false
        },
        address: {
            type: string,
            nullable: false
        },
        zipcode: {
            type: integer,
            nullable: false
        },
        phonenumber: {
            type: integer,
            nullable: false
        }
    },
    // area of a store, eg: floor
    SubLocation: {
        id: {
            type: increments
        },
        title: {
            type: string,
            nullable: false,
            unique: false
        },
        description: {
            type: string,
            nullable: false,
            unique: false
        },
        location_id: {
            type: integer,
            references: 'id',
            inTable: 'locations',
            onDelete: cascade,
            onUpdate: cascade,
            nullable: false
        }
    },
    // collection of locations
    // eg: District, state
    Area: {
        id: {
            type: increments
        },
        title: {
            type: string,
            nullable: false,
            // TODO: If we have one database for the entire site it doesn't make sense to have this be unique, each company can have identically named places
            unique: false
        },
        group_id: {
            type: integer,
            references: 'id',
            inTable: 'groups',
            onUpdate: cascade,
            onDelete: cascade
        }
    },
    // connects locations to an area
    AreaLocation: {
        id: {
            type: increments
        },
        location_id: {
            type: integer,
            references: 'id',
            inTable: 'locations',
            onUpdate: cascade,
            onDelete: cascade
        },
        area_id: {
            type: integer,
            references: 'id',
            inTable: 'areas',
            onUpdate: cascade,
            onDelete: cascade
        }
    },
    // job type that a user can be
    GroupUserClass: {
        id: {
            type: increments
        },
        group_id: {
            type: integer,
            references: 'id',
            inTable: 'groups',
            onDelete: cascade,
            onUpdate: cascade,
            nullable: false
        },
        title: {
            type: string,
            maxlen: 50,
            unique: true,
            nullable: false
        },
        description: {
            type: string,
            maxlen: 50
        },
        cansendnotification: {
            type: boolean,
            defaultTo: true
        },
        requiremanagerapproval: {
            type: boolean,
            defaultTo: true
        },
        grouppermission_id: {
            type: integer,
            references: 'id',
            inTable: 'grouppermissions',
            onDelete: cascade,
            onUpdate: cascade,
            nullable: false
        }
    },
    GroupInvitation: {
        id: {
            type: increments
        },
        inviter_user_id: {
            type: integer,
            references: 'id',
            inTable: 'users',
            onDelete: cascade,
            onUpdate: cascade,
            unique: false,
            nullable: false
        },
        // if invited person is already in the system
        user_id: {
            type: integer,
            references: 'id',
            inTable: 'users',
            onDelete: cascade,
            onUpdate: cascade,
            unique: false,
            nullable: true
        },
        // invited person is not in the system
        email: {
            type: string,
            unique: false,
            nullable: true
        },
        grouppermission_id: {
            type: integer,
            references: 'id',
            inTable: 'grouppermissions',
            onDelete: cascade,
            onUpdate: cascade,
            unique: false,
            nullable: false
        },
        message: {
            type: string,
            nullable: true
        },
        expires: {
            type: date,
            nullable: false
        },
        token: {
            type: string,
            nullable: false
        }
    },
    GroupInvitationUserClass: {
        id: {
            type: increments
        },
        groupinvitation_id: {
            type: integer,
            references: 'id',
            inTable: 'groupinvitations',
            onDelete: cascade,
            onUpdate: cascade,
            unique: false,
            nullable: false
        },
        groupuserclass_id: {
            type: integer,
            references: 'id',
            inTable: 'groupuserclasses',
            onDelete: cascade,
            onUpdate: cascade,
            unique: false,
            nullable: false
        }
    },
    Shift: {
        id: {
            type: increments
        },
        user_id: {
            type: integer,
            references: 'id',
            inTable: 'users',
            onUpdate: cascade,
            onDelete: cascade
        },
        title: {
            type: string,
            maxlen: 30,
            nullable: false
        },
        description: {
            type: string,
            maxlen: 256
        },
        start: {
            type: date,
            nullable: false
        },
        end: {
            type: date,
            nullable: false
        },
        timezone_id: {
            type: integer,
            references: 'id',
            inTable: 'timezones',
            onDelete: restrict,
            onUpdate: cascade,
            nullable: false
        },
        groupuserclass_id: {
            type: integer,
            references: 'id',
            inTable: 'groupuserclasses',
            onUpdate: cascade,
            onDelete: cascade
        },
        location_id: {
            type: integer,
            references: 'id',
            inTable: 'locations',
            unique: false,
            nullable: true,
            onUpdate: cascade,
            onDelete: cascade
        },
        sublocation_id: {
            type: integer,
            references: 'id',
            inTable: 'sublocations',
            unique: false,
            nullable: true,
            onUpdate: cascade,
            onDelete: cascade
        },
        notify: {
            type: date,
            nullable: true
        },
        // shift is canceled
        // it doesn't make sense to just out right delete a shift that was made
        // this provides no indication to any applicants or people interested that a shift has disappeared
        canceled: {
            type: boolean,
            default: false
        }
    },
    // Keeps a record of reasons that a shift has been canceled
    // each shift can have multiple reasons
    // this prevents an employee of initially putting a valid reason
    // then changing it after the fact
    ShiftCancelationReason: {
        id: {
            type: increments
        },
        // reason for canceling a shift
        reason: {
            type: string,
            nullable: false
        },
        // user who canceled a shift
        user_id: {
            type: integer,
            references: 'id',
            inTable: 'users',
            unique: false,
            nullable: false,
            onUpdate: cascade,
            onDelete: cascade
        },
        // shift that was canceled
        shift_id: {
            type: integer,
            references: 'id',
            inTable: 'shifts',
            unique: false,
            nullable: false,
            onUpdate: cascade,
            onDelete: cascade
        },
        // UTC second that shift was canceled
        date: {
            type: date,
            nullable: false
        }
    },
    // Application for a shift
    ShiftApplication: {
        id: {
            type: increments
        },
        shift_id: {
            type: integer,
            references: 'id',
            inTable: 'shifts',
            onDelete: cascade
        },
        user_id: {
            type: integer,
            references: 'id',
            inTable: 'users',
            onUpdate: cascade,
            // TODO: Should we delete this shift application?
            onDelete: cascade
        },
        date: {
            type: date,
            nullable: false
        },
        // application for shift has been recinded
        recinded: {
            type: boolean,
            default: false
        },
        recindeddate: {
            type: date,
            nullable: true
        }
    },
    // Reason for recission of a shift application
    ShiftRescissionReason: {
        id: {
            type: increments
        },
        shiftapplication_id: {
            type: integer,
            references: 'id',
            inTable: 'shiftapplications',
            onDelete: cascade
        },
        user_id: {
            type: integer,
            references: 'id',
            inTable: 'users',
            onDelete: cascade
        },
        date: {
            type: date,
            nullable: false
        },
        reason: {
            type: string,
            nullable: false
        }
    },
    ShiftApplicationAcceptDeclineReason: {
        id: {
            type: increments
        },
        accept: {
            type: boolean,
            nullable: false
        },
        shiftapplication_id: {
            type: integer,
            references: 'id',
            inTable: 'shiftapplications',
            onDelete: cascade
        },
        user_id: {
            type: integer,
            references: 'id',
            inTable: 'users',
            onDelete: cascade
        },
        date: {
            type: date,
            nullable: false
        },
        reason: {
            type: string,
            nullable: true
        }
    },
    IgnoreShift: {
        id: {
            type: increments
        },
        shift_id: {
            type: integer,
            references: 'id',
            inTable: 'shifts',
            onDelete: cascade
        },
        user_id: {
            type: integer,
            references: 'id',
            inTable: 'users',
            onDelete: cascade
        }
    },
    // connects a user to a group
    UserGroup: {
        id: {
            type: increments
        },
        user_id: {
            type: integer,
            references: 'id',
            inTable: 'users',
            onUpdate: cascade,
            onDelete: cascade
        },
        group_id: {
            type: integer,
            references: 'id',
            inTable: 'groups',
            onUpdate: cascade,
            onDelete: cascade
        },
        grouppermission_id: {
            type: integer,
            references: 'id',
            inTable: 'grouppermissions',
            onUpdate: cascade,
            onDelete: restrict
        }
    },
    // remember me tokens
    Token: {
        id: {
            type: increments
        },
        user_id: {
            type: integer,
            references: 'id',
            inTable: 'users',
            onDelete: cascade,
            onUpdate: cascade,
            nullable: false
        },
        token: {
            type: string,
            nullable: false,
            unique: true
        },
        date: {
            type: date,
            nullable: false
        }
    },
    PushToken: {
        id: {
            type: increments
        },
        token_id: {
            type: integer,
            references: 'id',
            inTable: 'tokens',
            onDelete: cascade,
            onUpdate: cascade,
            nullable: false
        },
        token: {
            type: string,
            nullable: false,
            unique: true
        },
        platform: {
            type: integer,
            nullable: false
        },
        date: {
            type: date,
            nullable: false
        },
        expires: {
            type: date,
            nullable: false
        }
    },
    // relates a user to a job type
    GroupUserClassToUser: {
        id: {
            type: increments
        },
        user_id: {
            type: integer,
            references: 'id',
            inTable: 'users',
            onDelete: cascade,
            onUpdate: cascade,
            nullable: false
        },
        groupuserclass_id: {
            type: integer,
            references: 'id',
            inTable: 'groupuserclasses',
            onDelete: cascade,
            onUpdate: cascade,
            nullable: false
        }
    },
    // Links a user to a location (permissions are linked via group job type instead of via this)
    UserPermission: {
        id: {
            type: increments
        },
        location_id: {
            type: integer,
            references: 'id',
            inTable: 'locations',
            onDelete: cascade,
            onUpdate: cascade,
            nullable: false
        },
        user_id: {
            type: integer,
            references: 'id',
            inTable: 'users',
            onDelete: cascade,
            nullable: false
        },
        subscribed: {
            type: boolean,
            defaultTo: true
        }
    },
    // TODO: DESCRIBE THIS
    GroupAdditionalInformation: {
        id: {
            type: increments
        },
        group_id: {
            type: integer,
            references: 'id',
            inTable: 'groups',
            onDelete: cascade,
            onUpdate: cascade,
            nullable: false
        },
        title: {
            type: string,
            nullable: false
        }
    },
    // TODO: DESCRIBE THIS
    GroupUserInformation: {
        id: {
            type: increments
        },
        user_id: {
            type: integer,
            references: 'id',
            inTable: 'users',
            onDelete: cascade,
            onUpdate: cascade,
            nullable: false
        },
        groupadditionalinformation_id: {
            type: integer,
            references: 'id',
            inTable: 'groupadditionalinformations',
            onDelete: cascade,
            onUpdate: cascade,
            nullable: false
        },
        data: {
            type: string,
            nullable: false
        }
    },
    // TODO: This table needs to be culled when a users' permission is lowered
    ManagingClassesAtLocation: {
        id: {
            type: increments
        },
        // userid of a privileged member
        usergroup_id: {
            type: integer,
            references: 'id',
            inTable: 'usergroups',
            onDelete: cascade,
            onUpdate: cascade,
            nullable: false
        },
        // location that manager is managing at
        location_id: {
            type: integer,
            references: 'id',
            inTable: 'locations',
            onDelete: cascade,
            onUpdate: cascade,
            nullable: false
        },
        // class that manager manages
        groupuserclass_id: {
            type: integer,
            references: 'id',
            inTable: 'groupuserclasses',
            onDelete: cascade,
            onUpdate: cascade,
            nullable: false
        },
        // Lets us notify managers when a new class is added
        // if they want to manage that type of user
        managing: {
            type: boolean,
            defaultsTo: false
        }
    },
    ResetPasswordToken: {
        id: {
            type: increments
        },
        user_id: {
            type: integer,
            references: 'id',
            inTable: 'users',
            onDelete: cascade,
            onUpdate: cascade,
            nullable: false,
            unique: true
        },
        token: {
            type: string,
            nullable: false,
            unique: true
        },
        expires: {
            type: date,
            nullable: false
        },
        lastEmailSent: {
            type: date,
            nullable: false
        }
    }
};

module.exports = {
    Schema: Schema
};
